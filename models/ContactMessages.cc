/**
 *
 *  ContactMessages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ContactMessages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string ContactMessages::Cols::_contact_id = "contact_id";
const std::string ContactMessages::Cols::_message_id = "message_id";
const std::vector<std::string> ContactMessages::primaryKeyName = {"contact_id","message_id"};
const bool ContactMessages::hasPrimaryKey = true;
const std::string ContactMessages::tableName = "contact_messages";

const std::vector<typename ContactMessages::MetaData> ContactMessages::metaData_={
{"contact_id","uint64_t","integer",8,1,1,0},
{"message_id","uint64_t","integer",8,1,1,0}
};
const std::string &ContactMessages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ContactMessages::ContactMessages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["contact_id"].isNull())
        {
            contactId_=std::make_shared<uint64_t>(r["contact_id"].as<uint64_t>());
        }
        if(!r["message_id"].isNull())
        {
            messageId_=std::make_shared<uint64_t>(r["message_id"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            contactId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            messageId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

ContactMessages::ContactMessages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            contactId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}

ContactMessages::ContactMessages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("contact_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["contact_id"].isNull())
        {
            contactId_=std::make_shared<uint64_t>((uint64_t)pJson["contact_id"].asUInt64());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<uint64_t>((uint64_t)pJson["message_id"].asUInt64());
        }
    }
}

void ContactMessages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            contactId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}
                                                                    
void ContactMessages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("contact_id"))
    {
        if(!pJson["contact_id"].isNull())
        {
            contactId_=std::make_shared<uint64_t>((uint64_t)pJson["contact_id"].asUInt64());
        }
    }
    if(pJson.isMember("message_id"))
    {
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<uint64_t>((uint64_t)pJson["message_id"].asUInt64());
        }
    }
}

const uint64_t &ContactMessages::getValueOfContactId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(contactId_)
        return *contactId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &ContactMessages::getContactId() const noexcept
{
    return contactId_;
}
void ContactMessages::setContactId(const uint64_t &pContactId) noexcept
{
    contactId_ = std::make_shared<uint64_t>(pContactId);
    dirtyFlag_[0] = true;
}


void ContactMessages::setContactIdToNull() noexcept
{
    contactId_.reset();
    dirtyFlag_[0] = true;
}


const uint64_t &ContactMessages::getValueOfMessageId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(messageId_)
        return *messageId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &ContactMessages::getMessageId() const noexcept
{
    return messageId_;
}
void ContactMessages::setMessageId(const uint64_t &pMessageId) noexcept
{
    messageId_ = std::make_shared<uint64_t>(pMessageId);
    dirtyFlag_[1] = true;
}


void ContactMessages::setMessageIdToNull() noexcept
{
    messageId_.reset();
    dirtyFlag_[1] = true;
}


void ContactMessages::updateId(const uint64_t id)
{
}
typename ContactMessages::PrimaryKeyType ContactMessages::getPrimaryKey() const
{
    return std::make_tuple(*contactId_,*messageId_);
}

const std::vector<std::string> &ContactMessages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
    };
    return inCols;
}

void ContactMessages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
}

const std::vector<std::string> ContactMessages::updateColumns() const
{
    std::vector<std::string> ret;
    return ret;
}

void ContactMessages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
}
Json::Value ContactMessages::toJson() const
{
    Json::Value ret;
    if(getContactId())
    {
        ret["contact_id"]=(Json::UInt64)getValueOfContactId();
    }
    else
    {
        ret["contact_id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=(Json::UInt64)getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    return ret;
}

Json::Value ContactMessages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getContactId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfContactId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getMessageId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfMessageId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getContactId())
    {
        ret["contact_id"]=(Json::UInt64)getValueOfContactId();
    }
    else
    {
        ret["contact_id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=(Json::UInt64)getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    return ret;
}

bool ContactMessages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("contact_id"))
    {
        if(!validJsonOfField(0, "contact_id", pJson["contact_id"], err, true))
            return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, true))
            return false;
    }
    return true;
}
bool ContactMessages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ContactMessages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("contact_id"))
    {
        if(!validJsonOfField(0, "contact_id", pJson["contact_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool ContactMessages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ContactMessages::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson, 
                                       std::string &err, 
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
